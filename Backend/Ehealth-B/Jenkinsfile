pipeline {
    agent { label 'Agent' }

    tools {
        maven "MAVEN"
    }

    environment {
        ARTIFACT_NAME = 'Ehealth-B-0.0.1-SNAPSHOT.jar'
        ARTIFACT_PATH = 'Backend/Ehealth-B/target'
    }

    stages {
        stage('Build') {
            steps {
                echo 'Build Start'
                checkout scmGit(
                    branches: [[name: '*/ciPipeline']],
                    extensions: [],
                    userRemoteConfigs: [[
                        credentialsId: '72145410-c633-4919-8bdd-f5ad0b33e759',
                        url: 'https://github.com/E-Health-Organization/E-health-Backend.git'
                    ]]
                )
                sh 'cd Backend/Ehealth-B && mvn -B -DskipTests clean package'
                echo 'Build Finished'
            }
        }

        stage('Checkstyle') {
            steps {
                script {
                    def exitCode = sh(script: 'cd Backend/Ehealth-B && mvn checkstyle:checkstyle', returnStatus: true)
                    if (exitCode != 0) {
                        currentBuild.result = 'UNSTABLE'
                        emailext subject: "Checkstyle Issues in ${env.JOB_NAME} #${env.BUILD_NUMBER}",
                                 body: "Checkstyle found issues in the code.\n\nCheck reports: ${env.BUILD_URL} \n\nPlease review and fix them.",
                                 to: "teodora.mtv@gmail.com",
                                 attachmentsPattern: "Backend/Ehealth-B/target/checkstyle-result.xml"
                    }
                }
            }
            
        }

        stage('PMD') {
            steps {
                sh 'cd Backend/Ehealth-B && mvn pmd:pmd'
            }
        }

        stage('FindBug') {
            steps {
                sh 'cd Backend/Ehealth-B && mvn spotbugs:spotbugs'
            }
        }

        stage('Copy Artifact to Another Repo') {
            steps {
                script {
                    echo 'Cleaning previous target-repo if exists....'
                    sh 'rm -rf target-repo'

                    echo 'Cloning the target repository...'
                    sh 'git clone https://github.com/E-Health-Organization/Artifact_Ehealth_Backend.git target-repo'

                    echo 'Copying artifact...'
                    sh '''
                        cp ${ARTIFACT_PATH}/${ARTIFACT_NAME} target-repo/
                        cd target-repo
                        git config user.email "aymar.hakizimana@gmail.com"
                        git config user.name "HaAymar"
                        git add ${ARTIFACT_NAME}
                        git commit -m "Adding new build artifact"
                    '''

                    echo 'Pushing changes to the target repository...'
                    withCredentials([usernamePassword(
                        credentialsId: '72145410-c633-4919-8bdd-f5ad0b33e759', // Remplacez par l'ID de vos credentials
                        usernameVariable: 'GIT_USERNAME',
                        passwordVariable: 'GIT_PASSWORD'
                    )]) {
                        sh '''
                            cd target-repo
                            git remote set-url origin https://${GIT_USERNAME}:${GIT_PASSWORD}@github.com/E-Health-Organization/Artifact_Ehealth_Backend.git
                            git push origin main
                        '''
                    }

                    echo 'Artifact copied and pushed successfully!'
                }
            }
        }
    }

    post {
        always {
            // Générer un rapport Checkstyle dans Jenkins après chaque build
            recordIssues(tools: [checkStyle(pattern: 'Backend/Ehealth-B/target/checkstyle-result.xml')])

            // Générer un rapport FindBugs dans Jenkins après chaque build
            recordIssues(tools: [spotBugs(pattern: 'Backend/Ehealth-B/target/spotbugsXml.xml')])

            // Générer un rapport PMD dans Jenkins après chaque build
            recordIssues(tools: [pmdParser(pattern: 'Backend/Ehealth-B/target/pmd.xml')])
        }
    

    
        success {

            echo  "Attempting to send email notification..."

            emailext (
                subject: "SUCCESS",
                body: "The build was successful!\n\nCheck ",
                to: "teodora.mtv@gmail.com",
                mimeType: 'text/plain'
            )
            echo "Success email sent!"
   
        }
        unstable {
            emailext (
                subject: "UNSTABLE: Code Analysis Issues in ${env.JOB_NAME} #${env.BUILD_NUMBER}",
                body: "Static code analysis detected issues. Please review Checkstyle, PMD, and SpotBugs reports.\n\nBuild Logs: ${env.BUILD_URL}",
                to: "teodora.mtv@gmail.com",
                mimeType: 'text/plain'
            )
        }
        failure {
            emailext (
                subject: "FAILURE: Build ${env.JOB_NAME} #${env.BUILD_NUMBER}",
                body: "The build failed! Please check the errors.\n\nCheck logs: ${env.BUILD_URL}",
                to: "teodora.mtv@gmail.com",
                mimeType: 'text/plain'
            )
        }   
    }
}

